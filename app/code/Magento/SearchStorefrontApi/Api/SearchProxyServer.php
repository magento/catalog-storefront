<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\SearchStorefrontApi\Api;

use \Magento\SearchStorefrontApi\Api\Data\ProductSearchRequestInterface;
use \Magento\SearchStorefrontApi\Api\Data\ProductsSearchResultInterface;
use \Magento\SearchStorefrontApi\Proto\ProductSearchRequest;
use \Magento\SearchStorefrontApi\Proto\ProductsSearchResult;
use \Magento\SearchStorefrontApi\Proto\SearchClient;

/**
 * Autogenerated description for SearchProxyServer class
 *
 * @SuppressWarnings(PHPMD)
 */
class SearchProxyServer implements \Magento\SearchStorefrontApi\Proto\SearchInterface
{
    /**
     * @var SearchServerInterface
     */
    private $service;

    /**
     * @param SearchServerInterface $service
     */
    public function __construct(
        SearchServerInterface $service
    ) {
        $this->service = $service;
    }

    /**
     * Autogenerated description for searchProducts method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ProductSearchRequest $in
     * @return ProductsSearchResult
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function searchProducts(\Spiral\GRPC\ContextInterface $ctx, ProductSearchRequest $in): ProductsSearchResult
    {
        try {
            $magentoDtoRequest = $this->searchProductsFromProto($in);
            $magentoDtoResponse = $this->service->searchProducts($magentoDtoRequest);
            return $this->searchProductsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for searchProducts method
     *
     * @param ProductSearchRequest $value
     * @return ProductSearchRequestInterface
     */
    private function searchProductsFromProto(ProductSearchRequest $value): ProductSearchRequestInterface
    {
        // convert data from \Magento\SearchStorefrontApi\Proto\ProductSearchRequest
        // to \Magento\SearchStorefrontApi\Api\Data\ProductSearchRequest
        /** @var \Magento\SearchStorefrontApi\Proto\ProductSearchRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\SearchStorefrontApi\Api\Data\ProductSearchRequest();
            $r->setPhrase($value->getPhrase());
            $r->setStore($value->getStore());
            $r->setCustomerGroupId($value->getCustomerGroupId());
            $r->setPageSize($value->getPageSize());
            $r->setCurrentPage($value->getCurrentPage());
            $res = [];
            foreach ($value->getFilters() as $item6) {
                // convert data from \Magento\SearchStorefrontApi\Proto\Filter
                // to \Magento\SearchStorefrontApi\Api\Data\Filter
                /** @var \Magento\SearchStorefrontApi\Proto\Filter $item6 **/
                $p = function () use ($item6) {
                    $r = new \Magento\SearchStorefrontApi\Api\Data\Filter();
                    $r->setAttribute($item6->getAttribute());
                    $values = [];
                    foreach ($item6->getIn() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setIn($values);
                    $r->setEq($item6->getEq());
                    $prop10 = $item6->getRange();
                    if ($prop10 !== null) {
                        // convert data from \Magento\SearchStorefrontApi\Proto\SearchRange
                        // to \Magento\SearchStorefrontApi\Api\Data\SearchRange
                        /** @var \Magento\SearchStorefrontApi\Proto\SearchRange $prop10 **/
                        $p = function () use ($prop10) {
                            $r = new \Magento\SearchStorefrontApi\Api\Data\SearchRange();
                            $r->setFrom($prop10->getFrom());
                            $r->setTo($prop10->getTo());
                            return $r;
                        };
                        $out = $p();
                        $r->setRange($out);
                    }
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setFilters($res);
            $res = [];
            foreach ($value->getSort() as $item7) {
                // convert data from \Magento\SearchStorefrontApi\Proto\Sort
                // to \Magento\SearchStorefrontApi\Api\Data\Sort
                /** @var \Magento\SearchStorefrontApi\Proto\Sort $item7 **/
                $p = function () use ($item7) {
                    $r = new \Magento\SearchStorefrontApi\Api\Data\Sort();
                    $r->setAttribute($item7->getAttribute());
                    $r->setTitle($item7->getTitle());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setSort($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for searchProducts method
     *
     * @param ProductsSearchResultInterface $value
     * @return ProductsSearchResult
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function searchProductsToProto(ProductsSearchResultInterface $value): ProductsSearchResult
    {
        // convert data from \Magento\SearchStorefrontApi\Api\Data\ProductsSearchResult
        // to \Magento\SearchStorefrontApi\Proto\ProductsSearchResult
        /** @var \Magento\SearchStorefrontApi\Api\Data\ProductsSearchResult $value **/
        $p = function () use ($value) {
            $r = new \Magento\SearchStorefrontApi\Proto\ProductsSearchResult();
            $r->setTotalCount($value->getTotalCount());
            $values = [];
            foreach ($value->getItems() as $newValue) {
                $values[] = $newValue;
            }
            $r->setItems($values);
            $res = [];
            foreach ($value->getFacets() as $item3) {
                // convert data from \Magento\SearchStorefrontApi\Api\Data\Bucket
                // to \Magento\SearchStorefrontApi\Proto\Bucket
                /** @var \Magento\SearchStorefrontApi\Api\Data\Bucket $item3 **/
                $p = function () use ($item3) {
                    $r = new \Magento\SearchStorefrontApi\Proto\Bucket();
                    $r->setAttribute($item3->getAttribute());
                    $r->setLabel($item3->getLabel());
                    $r->setCount($item3->getCount());
                    $res = [];
                    foreach ($item3->getOptions() as $item7) {
                        // convert data from \Magento\SearchStorefrontApi\Api\Data\Option
                        // to \Magento\SearchStorefrontApi\Proto\Option
                        /** @var \Magento\SearchStorefrontApi\Api\Data\Option $item7 **/
                        $p = function () use ($item7) {
                            $r = new \Magento\SearchStorefrontApi\Proto\Option();
                            $r->setOptionId($item7->getOptionId());
                            $r->setProductId($item7->getProductId());
                            $r->setType($item7->getType());
                            $r->setIsRequire($item7->getIsRequire());
                            $r->setSku($item7->getSku());
                            $r->setMaxCharacters($item7->getMaxCharacters());
                            $r->setFileExtension($item7->getFileExtension());
                            $r->setImageSizeX($item7->getImageSizeX());
                            $r->setImageSizeY($item7->getImageSizeY());
                            $r->setSortOrder($item7->getSortOrder());
                            $r->setDefaultTitle($item7->getDefaultTitle());
                            $r->setStoreTitle($item7->getStoreTitle());
                            $r->setTitle($item7->getTitle());
                            $r->setDefaultPrice($item7->getDefaultPrice());
                            $r->setDefaultPriceType($item7->getDefaultPriceType());
                            $r->setStorePrice($item7->getStorePrice());
                            $r->setStorePriceType($item7->getStorePriceType());
                            $r->setPrice($item7->getPrice());
                            $r->setPriceType($item7->getPriceType());
                            $r->setRequired($item7->getRequired());
                            $r->setProductSku($item7->getProductSku());
                            $res = [];
                            foreach ($item7->getValue() as $item29) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\OptionValue
                                // to \Magento\CatalogStorefrontApi\Proto\OptionValue
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\OptionValue $item29 **/
                                $p = function () use ($item29) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\OptionValue();
                                    $r->setOptionId($item29->getOptionId());
                                    $r->setProductId($item29->getProductId());
                                    $r->setType($item29->getType());
                                    $r->setIsRequire($item29->getIsRequire());
                                    $r->setSku($item29->getSku());
                                    $r->setMaxCharacters($item29->getMaxCharacters());
                                    $r->setFileExtension($item29->getFileExtension());
                                    $r->setImageSizeX($item29->getImageSizeX());
                                    $r->setImageSizeY($item29->getImageSizeY());
                                    $r->setSortOrder($item29->getSortOrder());
                                    $r->setDefaultTitle($item29->getDefaultTitle());
                                    $r->setStoreTitle($item29->getStoreTitle());
                                    $r->setTitle($item29->getTitle());
                                    $r->setDefaultPrice($item29->getDefaultPrice());
                                    $r->setDefaultPriceType($item29->getDefaultPriceType());
                                    $r->setStorePrice($item29->getStorePrice());
                                    $r->setStorePriceType($item29->getStorePriceType());
                                    $r->setPrice($item29->getPrice());
                                    $r->setPriceType($item29->getPriceType());
                                    $r->setOptionTypeId($item29->getOptionTypeId());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setValue($res);
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setOptions($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setFacets($res);
            $prop4 = $value->getPageInfo();
            if ($prop4 !== null) {
                // convert data from \Magento\SearchStorefrontApi\Api\Data\SearchResultPageInfo
                // to \Magento\SearchStorefrontApi\Proto\SearchResultPageInfo
                /** @var \Magento\SearchStorefrontApi\Api\Data\SearchResultPageInfo $prop4 **/
                $p = function () use ($prop4) {
                    $r = new \Magento\SearchStorefrontApi\Proto\SearchResultPageInfo();
                    $r->setCurrentPage($prop4->getCurrentPage());
                    $r->setPageSize($prop4->getPageSize());
                    $r->setTotalPages($prop4->getTotalPages());
                    return $r;
                };
                $proto = $p();
                $r->setPageInfo($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }
}
