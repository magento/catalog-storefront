<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api;

use \Magento\CatalogStorefrontApi\Api\Data\ImportRatingsMetadataRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportRatingsMetadataResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteRatingsMetadataRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteRatingsMetadataResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\RatingsMetadataRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\RatingsMetadataResponseInterface;
use \Magento\CatalogStorefrontApi\Proto\ImportRatingsMetadataRequest;
use \Magento\CatalogStorefrontApi\Proto\ImportRatingsMetadataResponse;
use \Magento\CatalogStorefrontApi\Proto\DeleteRatingsMetadataRequest;
use \Magento\CatalogStorefrontApi\Proto\DeleteRatingsMetadataResponse;
use \Magento\CatalogStorefrontApi\Proto\RatingsMetadataRequest;
use \Magento\CatalogStorefrontApi\Proto\RatingsMetadataResponse;
use \Magento\CatalogStorefrontApi\Proto\RatingsMetadataClient;

/**
 * Autogenerated description for RatingsMetadataProxyServer class
 *
 * @SuppressWarnings(PHPMD)
 */
class RatingsMetadataProxyServer implements \Magento\CatalogStorefrontApi\Proto\RatingsMetadataInterface
{
    /**
     * @var RatingsMetadataServerInterface
     */
    private $service;

    /**
     * @param RatingsMetadataServerInterface $service
     */
    public function __construct(
        RatingsMetadataServerInterface $service
    ) {
        $this->service = $service;
    }

    /**
     * Autogenerated description for ImportRatingsMetadata method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ImportRatingsMetadataRequest $in
     * @return ImportRatingsMetadataResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function ImportRatingsMetadata(\Spiral\GRPC\ContextInterface $ctx, ImportRatingsMetadataRequest $in): ImportRatingsMetadataResponse
    {
        try {
            $magentoDtoRequest = $this->ImportRatingsMetadataFromProto($in);
            $magentoDtoResponse = $this->service->ImportRatingsMetadata($magentoDtoRequest);
            return $this->ImportRatingsMetadataToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for ImportRatingsMetadata method
     *
     * @param ImportRatingsMetadataRequest $value
     * @return ImportRatingsMetadataRequestInterface
     */
    private function ImportRatingsMetadataFromProto(ImportRatingsMetadataRequest $value): ImportRatingsMetadataRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportRatingsMetadataRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportRatingsMetadataRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportRatingsMetadataRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportRatingsMetadataRequest();
            $res = [];
            foreach ($value->getMetadata() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\RatingMetadata
                // to \Magento\CatalogStorefrontApi\Api\Data\RatingMetadata
                /** @var \Magento\CatalogStorefrontApi\Proto\RatingMetadata $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\RatingMetadata();
                    $r->setRatingId($item1->getRatingId());
                    $r->setName($item1->getName());
                    $res = [];
                    foreach ($item1->getValues() as $item4) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\RatingValue
                        // to \Magento\CatalogStorefrontApi\Api\Data\RatingValue
                        /** @var \Magento\CatalogStorefrontApi\Proto\RatingValue $item4 **/
                        $p = function () use ($item4) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\RatingValue();
                            $r->setValueId($item4->getValueId());
                            $r->setValue($item4->getValue());
                            $r->setPosition($item4->getPosition());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setValues($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setMetadata($res);
            $r->setStore($value->getStore());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for ImportRatingsMetadata method
     *
     * @param ImportRatingsMetadataResponseInterface $value
     * @return ImportRatingsMetadataResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function ImportRatingsMetadataToProto(ImportRatingsMetadataResponseInterface $value): ImportRatingsMetadataResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportRatingsMetadataResponse
        // to \Magento\CatalogStorefrontApi\Proto\ImportRatingsMetadataResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportRatingsMetadataResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportRatingsMetadataResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for DeleteRatingsMetadata method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param DeleteRatingsMetadataRequest $in
     * @return DeleteRatingsMetadataResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function DeleteRatingsMetadata(\Spiral\GRPC\ContextInterface $ctx, DeleteRatingsMetadataRequest $in): DeleteRatingsMetadataResponse
    {
        try {
            $magentoDtoRequest = $this->DeleteRatingsMetadataFromProto($in);
            $magentoDtoResponse = $this->service->DeleteRatingsMetadata($magentoDtoRequest);
            return $this->DeleteRatingsMetadataToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for DeleteRatingsMetadata method
     *
     * @param DeleteRatingsMetadataRequest $value
     * @return DeleteRatingsMetadataRequestInterface
     */
    private function DeleteRatingsMetadataFromProto(DeleteRatingsMetadataRequest $value): DeleteRatingsMetadataRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\DeleteRatingsMetadataRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\DeleteRatingsMetadataRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\DeleteRatingsMetadataRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\DeleteRatingsMetadataRequest();
            $values = [];
            foreach ($value->getRatingIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setRatingIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for DeleteRatingsMetadata method
     *
     * @param DeleteRatingsMetadataResponseInterface $value
     * @return DeleteRatingsMetadataResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function DeleteRatingsMetadataToProto(DeleteRatingsMetadataResponseInterface $value): DeleteRatingsMetadataResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DeleteRatingsMetadataResponse
        // to \Magento\CatalogStorefrontApi\Proto\DeleteRatingsMetadataResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\DeleteRatingsMetadataResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\DeleteRatingsMetadataResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for GetRatingsMetadata method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param RatingsMetadataRequest $in
     * @return RatingsMetadataResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function GetRatingsMetadata(\Spiral\GRPC\ContextInterface $ctx, RatingsMetadataRequest $in): RatingsMetadataResponse
    {
        try {
            $magentoDtoRequest = $this->GetRatingsMetadataFromProto($in);
            $magentoDtoResponse = $this->service->GetRatingsMetadata($magentoDtoRequest);
            return $this->GetRatingsMetadataToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for GetRatingsMetadata method
     *
     * @param RatingsMetadataRequest $value
     * @return RatingsMetadataRequestInterface
     */
    private function GetRatingsMetadataFromProto(RatingsMetadataRequest $value): RatingsMetadataRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\RatingsMetadataRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\RatingsMetadataRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\RatingsMetadataRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\RatingsMetadataRequest();
            $values = [];
            foreach ($value->getRatingIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setRatingIds($values);
            $r->setStore($value->getStore());
            $res = [];
            foreach ($value->getPagination() as $item3) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\PaginationRequest
                // to \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest
                /** @var \Magento\CatalogStorefrontApi\Proto\PaginationRequest $item3 **/
                $p = function () use ($item3) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest();
                    $r->setName($item3->getName());
                    $r->setValue($item3->getValue());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPagination($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for GetRatingsMetadata method
     *
     * @param RatingsMetadataResponseInterface $value
     * @return RatingsMetadataResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function GetRatingsMetadataToProto(RatingsMetadataResponseInterface $value): RatingsMetadataResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\RatingsMetadataResponse
        // to \Magento\CatalogStorefrontApi\Proto\RatingsMetadataResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\RatingsMetadataResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\RatingsMetadataResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\RatingMetadata
                // to \Magento\CatalogStorefrontApi\Proto\RatingMetadata
                /** @var \Magento\CatalogStorefrontApi\Api\Data\RatingMetadata $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\RatingMetadata();
                    $r->setRatingId($item1->getRatingId());
                    $r->setName($item1->getName());
                    $res = [];
                    foreach ($item1->getValues() as $item4) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\RatingValue
                        // to \Magento\CatalogStorefrontApi\Proto\RatingValue
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\RatingValue $item4 **/
                        $p = function () use ($item4) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\RatingValue();
                            $r->setValueId($item4->getValueId());
                            $r->setValue($item4->getValue());
                            $r->setPosition($item4->getPosition());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setValues($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setItems($res);
            $prop2 = $value->getPagination();
            if ($prop2 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse
                // to \Magento\CatalogStorefrontApi\Proto\PaginationResponse
                /** @var \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\PaginationResponse();
                    $r->setPageSize($prop2->getPageSize());
                    $r->setCurrentPage($prop2->getCurrentPage());
                    $r->setTotalPages($prop2->getTotalPages());
                    return $r;
                };
                $proto = $p();
                $r->setPagination($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }
}
