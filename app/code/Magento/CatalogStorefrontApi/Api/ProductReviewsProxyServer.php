<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api;

use \Magento\CatalogStorefrontApi\Api\Data\ImportReviewsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportReviewsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteReviewsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteReviewsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductReviewRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductReviewResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\CustomerProductReviewRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\CustomerProductReviewResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductReviewCountRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductReviewCountResponseInterface;
use \Magento\CatalogStorefrontApi\Proto\ImportReviewsRequest;
use \Magento\CatalogStorefrontApi\Proto\ImportReviewsResponse;
use \Magento\CatalogStorefrontApi\Proto\DeleteReviewsRequest;
use \Magento\CatalogStorefrontApi\Proto\DeleteReviewsResponse;
use \Magento\CatalogStorefrontApi\Proto\ProductReviewRequest;
use \Magento\CatalogStorefrontApi\Proto\ProductReviewResponse;
use \Magento\CatalogStorefrontApi\Proto\CustomerProductReviewRequest;
use \Magento\CatalogStorefrontApi\Proto\CustomerProductReviewResponse;
use \Magento\CatalogStorefrontApi\Proto\ProductReviewCountRequest;
use \Magento\CatalogStorefrontApi\Proto\ProductReviewCountResponse;
use \Magento\CatalogStorefrontApi\Proto\ProductReviewsClient;

/**
 * Autogenerated description for ProductReviewsProxyServer class
 *
 * @SuppressWarnings(PHPMD)
 */
class ProductReviewsProxyServer implements \Magento\CatalogStorefrontApi\Proto\ProductReviewsInterface
{
    /**
     * @var ProductReviewsServerInterface
     */
    private $service;

    /**
     * @param ProductReviewsServerInterface $service
     */
    public function __construct(
        ProductReviewsServerInterface $service
    ) {
        $this->service = $service;
    }

    /**
     * Autogenerated description for ImportProductReviews method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ImportReviewsRequest $in
     * @return ImportReviewsResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function ImportProductReviews(\Spiral\GRPC\ContextInterface $ctx, ImportReviewsRequest $in): ImportReviewsResponse
    {
        try {
            $magentoDtoRequest = $this->ImportProductReviewsFromProto($in);
            $magentoDtoResponse = $this->service->ImportProductReviews($magentoDtoRequest);
            return $this->ImportProductReviewsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for ImportProductReviews method
     *
     * @param ImportReviewsRequest $value
     * @return ImportReviewsRequestInterface
     */
    private function ImportProductReviewsFromProto(ImportReviewsRequest $value): ImportReviewsRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportReviewsRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportReviewsRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportReviewsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportReviewsRequest();
            $res = [];
            foreach ($value->getReviews() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\ImportReview
                // to \Magento\CatalogStorefrontApi\Api\Data\ImportReview
                /** @var \Magento\CatalogStorefrontApi\Proto\ImportReview $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportReview();
                    $r->setId($item1->getId());
                    $r->setProductId($item1->getProductId());
                    $r->setTitle($item1->getTitle());
                    $r->setNickname($item1->getNickname());
                    $r->setText($item1->getText());
                    $r->setCustomerId($item1->getCustomerId());
                    $values = [];
                    foreach ($item1->getVisibility() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setVisibility($values);
                    $res = [];
                    foreach ($item1->getRatings() as $item9) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Rating
                        // to \Magento\CatalogStorefrontApi\Api\Data\Rating
                        /** @var \Magento\CatalogStorefrontApi\Proto\Rating $item9 **/
                        $p = function () use ($item9) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Rating();
                            $r->setRatingId($item9->getRatingId());
                            $r->setValue($item9->getValue());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setRatings($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setReviews($res);
            $r->setStore($value->getStore());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for ImportProductReviews method
     *
     * @param ImportReviewsResponseInterface $value
     * @return ImportReviewsResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function ImportProductReviewsToProto(ImportReviewsResponseInterface $value): ImportReviewsResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportReviewsResponse
        // to \Magento\CatalogStorefrontApi\Proto\ImportReviewsResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportReviewsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportReviewsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for DeleteProductReviews method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param DeleteReviewsRequest $in
     * @return DeleteReviewsResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function DeleteProductReviews(\Spiral\GRPC\ContextInterface $ctx, DeleteReviewsRequest $in): DeleteReviewsResponse
    {
        try {
            $magentoDtoRequest = $this->DeleteProductReviewsFromProto($in);
            $magentoDtoResponse = $this->service->DeleteProductReviews($magentoDtoRequest);
            return $this->DeleteProductReviewsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for DeleteProductReviews method
     *
     * @param DeleteReviewsRequest $value
     * @return DeleteReviewsRequestInterface
     */
    private function DeleteProductReviewsFromProto(DeleteReviewsRequest $value): DeleteReviewsRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\DeleteReviewsRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\DeleteReviewsRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\DeleteReviewsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\DeleteReviewsRequest();
            $values = [];
            foreach ($value->getReviewIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setReviewIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for DeleteProductReviews method
     *
     * @param DeleteReviewsResponseInterface $value
     * @return DeleteReviewsResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function DeleteProductReviewsToProto(DeleteReviewsResponseInterface $value): DeleteReviewsResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DeleteReviewsResponse
        // to \Magento\CatalogStorefrontApi\Proto\DeleteReviewsResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\DeleteReviewsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\DeleteReviewsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for GetProductReviews method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ProductReviewRequest $in
     * @return ProductReviewResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function GetProductReviews(\Spiral\GRPC\ContextInterface $ctx, ProductReviewRequest $in): ProductReviewResponse
    {
        try {
            $magentoDtoRequest = $this->GetProductReviewsFromProto($in);
            $magentoDtoResponse = $this->service->GetProductReviews($magentoDtoRequest);
            return $this->GetProductReviewsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for GetProductReviews method
     *
     * @param ProductReviewRequest $value
     * @return ProductReviewRequestInterface
     */
    private function GetProductReviewsFromProto(ProductReviewRequest $value): ProductReviewRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductReviewRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductReviewRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductReviewRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductReviewRequest();
            $r->setProductId($value->getProductId());
            $r->setStore($value->getStore());
            $res = [];
            foreach ($value->getPagination() as $item3) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\PaginationRequest
                // to \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest
                /** @var \Magento\CatalogStorefrontApi\Proto\PaginationRequest $item3 **/
                $p = function () use ($item3) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest();
                    $r->setName($item3->getName());
                    $r->setValue($item3->getValue());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPagination($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for GetProductReviews method
     *
     * @param ProductReviewResponseInterface $value
     * @return ProductReviewResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function GetProductReviewsToProto(ProductReviewResponseInterface $value): ProductReviewResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductReviewResponse
        // to \Magento\CatalogStorefrontApi\Proto\ProductReviewResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductReviewResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductReviewResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ReadReview
                // to \Magento\CatalogStorefrontApi\Proto\ReadReview
                /** @var \Magento\CatalogStorefrontApi\Api\Data\ReadReview $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\ReadReview();
                    $r->setId($item1->getId());
                    $r->setProductId($item1->getProductId());
                    $r->setTitle($item1->getTitle());
                    $r->setNickname($item1->getNickname());
                    $r->setText($item1->getText());
                    $res = [];
                    foreach ($item1->getRatings() as $item7) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Rating
                        // to \Magento\CatalogStorefrontApi\Proto\Rating
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Rating $item7 **/
                        $p = function () use ($item7) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Rating();
                            $r->setRatingId($item7->getRatingId());
                            $r->setValue($item7->getValue());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setRatings($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setItems($res);
            $prop2 = $value->getPagination();
            if ($prop2 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse
                // to \Magento\CatalogStorefrontApi\Proto\PaginationResponse
                /** @var \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\PaginationResponse();
                    $r->setPageSize($prop2->getPageSize());
                    $r->setCurrentPage($prop2->getCurrentPage());
                    $r->setTotalPages($prop2->getTotalPages());
                    return $r;
                };
                $proto = $p();
                $r->setPagination($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for GetCustomerProductReviews method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param CustomerProductReviewRequest $in
     * @return CustomerProductReviewResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function GetCustomerProductReviews(\Spiral\GRPC\ContextInterface $ctx, CustomerProductReviewRequest $in): CustomerProductReviewResponse
    {
        try {
            $magentoDtoRequest = $this->GetCustomerProductReviewsFromProto($in);
            $magentoDtoResponse = $this->service->GetCustomerProductReviews($magentoDtoRequest);
            return $this->GetCustomerProductReviewsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for GetCustomerProductReviews method
     *
     * @param CustomerProductReviewRequest $value
     * @return CustomerProductReviewRequestInterface
     */
    private function GetCustomerProductReviewsFromProto(CustomerProductReviewRequest $value): CustomerProductReviewRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\CustomerProductReviewRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\CustomerProductReviewRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\CustomerProductReviewRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\CustomerProductReviewRequest();
            $r->setCustomerId($value->getCustomerId());
            $r->setStore($value->getStore());
            $res = [];
            foreach ($value->getPagination() as $item3) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\PaginationRequest
                // to \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest
                /** @var \Magento\CatalogStorefrontApi\Proto\PaginationRequest $item3 **/
                $p = function () use ($item3) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest();
                    $r->setName($item3->getName());
                    $r->setValue($item3->getValue());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPagination($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for GetCustomerProductReviews method
     *
     * @param CustomerProductReviewResponseInterface $value
     * @return CustomerProductReviewResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function GetCustomerProductReviewsToProto(CustomerProductReviewResponseInterface $value): CustomerProductReviewResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\CustomerProductReviewResponse
        // to \Magento\CatalogStorefrontApi\Proto\CustomerProductReviewResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\CustomerProductReviewResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\CustomerProductReviewResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ReadReview
                // to \Magento\CatalogStorefrontApi\Proto\ReadReview
                /** @var \Magento\CatalogStorefrontApi\Api\Data\ReadReview $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\ReadReview();
                    $r->setId($item1->getId());
                    $r->setProductId($item1->getProductId());
                    $r->setTitle($item1->getTitle());
                    $r->setNickname($item1->getNickname());
                    $r->setText($item1->getText());
                    $res = [];
                    foreach ($item1->getRatings() as $item7) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Rating
                        // to \Magento\CatalogStorefrontApi\Proto\Rating
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Rating $item7 **/
                        $p = function () use ($item7) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Rating();
                            $r->setRatingId($item7->getRatingId());
                            $r->setValue($item7->getValue());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setRatings($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setItems($res);
            $prop2 = $value->getPagination();
            if ($prop2 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse
                // to \Magento\CatalogStorefrontApi\Proto\PaginationResponse
                /** @var \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\PaginationResponse();
                    $r->setPageSize($prop2->getPageSize());
                    $r->setCurrentPage($prop2->getCurrentPage());
                    $r->setTotalPages($prop2->getTotalPages());
                    return $r;
                };
                $proto = $p();
                $r->setPagination($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for GetProductReviewCount method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ProductReviewCountRequest $in
     * @return ProductReviewCountResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function GetProductReviewCount(\Spiral\GRPC\ContextInterface $ctx, ProductReviewCountRequest $in): ProductReviewCountResponse
    {
        try {
            $magentoDtoRequest = $this->GetProductReviewCountFromProto($in);
            $magentoDtoResponse = $this->service->GetProductReviewCount($magentoDtoRequest);
            return $this->GetProductReviewCountToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for GetProductReviewCount method
     *
     * @param ProductReviewCountRequest $value
     * @return ProductReviewCountRequestInterface
     */
    private function GetProductReviewCountFromProto(ProductReviewCountRequest $value): ProductReviewCountRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductReviewCountRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductReviewCountRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductReviewCountRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductReviewCountRequest();
            $r->setProductId($value->getProductId());
            $r->setStore($value->getStore());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for GetProductReviewCount method
     *
     * @param ProductReviewCountResponseInterface $value
     * @return ProductReviewCountResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function GetProductReviewCountToProto(ProductReviewCountResponseInterface $value): ProductReviewCountResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductReviewCountResponse
        // to \Magento\CatalogStorefrontApi\Proto\ProductReviewCountResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductReviewCountResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductReviewCountResponse();
            $r->setReviewCount($value->getReviewCount());
            return $r;
        };
        $proto = $p();

        return $proto;
    }
}
