<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api;

use \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResultInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponseInterface;
use \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest;
use \Magento\CatalogStorefrontApi\Proto\ProductsGetResult;
use \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest;
use \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse;
use \Magento\CatalogStorefrontApi\Proto\DeleteProductsRequest;
use \Magento\CatalogStorefrontApi\Proto\DeleteProductsResponse;
use \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesRequest;
use \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesResponse;
use \Magento\CatalogStorefrontApi\Proto\ImportCategoriesRequest;
use \Magento\CatalogStorefrontApi\Proto\ImportCategoriesResponse;
use \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest;
use \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse;
use \Magento\CatalogStorefrontApi\Proto\CatalogClient;

/**
 * Autogenerated description for Catalog class
 *
 * @SuppressWarnings(PHPMD)
 */
class Catalog implements CatalogInterface
{
    /**
     * @var CatalogClient
     */
    private $protoClient;

    /**
     * @param string $hostname
     * @param array $options
     * @param string|null $channel
     */
    public function __construct(
        string $hostname,
        array $options,
        ?string $channel = null
    ) {
        $this->protoClient = new CatalogClient($hostname, $options, $channel);
    }

    /**
     * @inheritdoc
     *
     * @param ProductsGetRequestInterface $request
     * @return ProductsGetResultInterface
     * @throws \Throwable
     */
    public function getProducts(ProductsGetRequestInterface $request): ProductsGetResultInterface
    {
        $protoRequest = $this->getProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->getProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getProductsFromProto($protoResult);
    }

    /**
     * Autogenerated description for getProducts method
     *
     * @param ProductsGetRequestInterface $value
     * @return ProductsGetRequest
     */
    private function getProductsToProto(ProductsGetRequestInterface $value): ProductsGetRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest
        // to \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest();
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            $r->setStore($value->getStore());
            $values = [];
            foreach ($value->getAttributeCodes() as $newValue) {
                $values[] = $newValue;
            }
            $r->setAttributeCodes($values);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getProducts method
     *
     * @param ProductsGetResult $value
     * @return ProductsGetResultInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getProductsFromProto(ProductsGetResult $value): ProductsGetResultInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductsGetResult
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductsGetResult $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Product
                // to \Magento\CatalogStorefrontApi\Api\Data\Product
                /** @var \Magento\CatalogStorefrontApi\Proto\Product $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Product();
                    $r->setId($item1->getId());
                    $r->setAttributeSetId($item1->getAttributeSetId());
                    $r->setHasOptions($item1->getHasOptions());
                    $r->setCreatedAt($item1->getCreatedAt());
                    $r->setUpdatedAt($item1->getUpdatedAt());
                    $r->setSku($item1->getSku());
                    $r->setTypeId($item1->getTypeId());
                    $r->setStatus($item1->getStatus());
                    $r->setStockStatus($item1->getStockStatus());
                    $r->setName($item1->getName());
                    $r->setDescription($item1->getDescription());
                    $r->setShortDescription($item1->getShortDescription());
                    $r->setUrlKey($item1->getUrlKey());
                    $r->setGiftcardType($item1->getGiftcardType());
                    $r->setQty($item1->getQty());
                    $r->setTaxClassId($item1->getTaxClassId());
                    $r->setWeight($item1->getWeight());
                    $res = [];
                    foreach ($item1->getImages() as $item19) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $item19 **/
                        $p = function () use ($item19) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $prop20 = $item19->getResource();
                            if ($prop20 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\MediaResource
                                // to \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Proto\MediaResource $prop20 **/
                                $p = function () use ($prop20) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\MediaResource();
                                    $r->setUrl($prop20->getUrl());
                                    $r->setLabel($prop20->getLabel());
                                    $values = [];
                                    foreach ($prop20->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $out = $p();
                                $r->setResource($out);
                            }
                            $r->setSortOrder($item19->getSortOrder());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setImages($res);
                    $res = [];
                    foreach ($item1->getVideos() as $item20) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Video
                        // to \Magento\CatalogStorefrontApi\Api\Data\Video
                        /** @var \Magento\CatalogStorefrontApi\Proto\Video $item20 **/
                        $p = function () use ($item20) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Video();
                            $prop21 = $item20->getPreview();
                            if ($prop21 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\MediaResource
                                // to \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Proto\MediaResource $prop21 **/
                                $p = function () use ($prop21) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\MediaResource();
                                    $r->setUrl($prop21->getUrl());
                                    $r->setLabel($prop21->getLabel());
                                    $values = [];
                                    foreach ($prop21->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $out = $p();
                                $r->setPreview($out);
                            }
                            $prop22 = $item20->getVideo();
                            if ($prop22 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\VideoItem
                                // to \Magento\CatalogStorefrontApi\Api\Data\VideoItem
                                /** @var \Magento\CatalogStorefrontApi\Proto\VideoItem $prop22 **/
                                $p = function () use ($prop22) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\VideoItem();
                                    $r->setVideoProvider($prop22->getVideoProvider());
                                    $r->setVideoUrl($prop22->getVideoUrl());
                                    $r->setVideoTitle($prop22->getVideoTitle());
                                    $r->setVideoDescription($prop22->getVideoDescription());
                                    $r->setVideoMetadata($prop22->getVideoMetadata());
                                    $r->setMediaType($prop22->getMediaType());
                                    return $r;
                                };
                                $out = $p();
                                $r->setVideo($out);
                            }
                            $r->setSortOrder($item20->getSortOrder());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setVideos($res);
                    $res = [];
                    foreach ($item1->getSamples() as $item21) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Sample
                        // to \Magento\CatalogStorefrontApi\Api\Data\Sample
                        /** @var \Magento\CatalogStorefrontApi\Proto\Sample $item21 **/
                        $p = function () use ($item21) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Sample();
                            $prop22 = $item21->getResource();
                            if ($prop22 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\MediaResource
                                // to \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Proto\MediaResource $prop22 **/
                                $p = function () use ($prop22) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\MediaResource();
                                    $r->setUrl($prop22->getUrl());
                                    $r->setLabel($prop22->getLabel());
                                    $values = [];
                                    foreach ($prop22->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $out = $p();
                                $r->setResource($out);
                            }
                            $r->setSortOrder($item21->getSortOrder());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setSamples($res);
                    $r->setVisibility($item1->getVisibility());
                    $res = [];
                    foreach ($item1->getAttributes() as $item23) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Attribute
                        // to \Magento\CatalogStorefrontApi\Api\Data\Attribute
                        /** @var \Magento\CatalogStorefrontApi\Proto\Attribute $item23 **/
                        $p = function () use ($item23) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Attribute();
                            $r->setCode($item23->getCode());
                            $r->setType($item23->getType());
                            $values = [];
                            foreach ($item23->getValues() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setValues($values);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setAttributes($res);
                    $r->setMetaDescription($item1->getMetaDescription());
                    $r->setMetaKeyword($item1->getMetaKeyword());
                    $r->setMetaTitle($item1->getMetaTitle());
                    $values = [];
                    foreach ($item1->getCategories() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setCategories($values);
                    $r->setRequiredOptions($item1->getRequiredOptions());
                    $r->setCreatedIn($item1->getCreatedIn());
                    $r->setUpdatedIn($item1->getUpdatedIn());
                    $r->setQuantityAndStockStatus($item1->getQuantityAndStockStatus());
                    $r->setOptionsContainer($item1->getOptionsContainer());
                    $r->setMsrpDisplayActualPriceType($item1->getMsrpDisplayActualPriceType());
                    $r->setIsReturnable($item1->getIsReturnable());
                    $r->setUrlSuffix($item1->getUrlSuffix());
                    $res = [];
                    foreach ($item1->getOptions() as $item36) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Option
                        // to \Magento\CatalogStorefrontApi\Api\Data\Option
                        /** @var \Magento\CatalogStorefrontApi\Proto\Option $item36 **/
                        $p = function () use ($item36) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Option();
                            $r->setOptionId($item36->getOptionId());
                            $r->setProductId($item36->getProductId());
                            $r->setType($item36->getType());
                            $r->setIsRequire($item36->getIsRequire());
                            $r->setSku($item36->getSku());
                            $r->setMaxCharacters($item36->getMaxCharacters());
                            $r->setFileExtension($item36->getFileExtension());
                            $r->setImageSizeX($item36->getImageSizeX());
                            $r->setImageSizeY($item36->getImageSizeY());
                            $r->setSortOrder($item36->getSortOrder());
                            $r->setDefaultTitle($item36->getDefaultTitle());
                            $r->setStoreTitle($item36->getStoreTitle());
                            $r->setTitle($item36->getTitle());
                            $r->setDefaultPrice($item36->getDefaultPrice());
                            $r->setDefaultPriceType($item36->getDefaultPriceType());
                            $r->setStorePrice($item36->getStorePrice());
                            $r->setStorePriceType($item36->getStorePriceType());
                            $r->setPrice($item36->getPrice());
                            $r->setPriceType($item36->getPriceType());
                            $r->setRequired($item36->getRequired());
                            $r->setProductSku($item36->getProductSku());
                            $res = [];
                            foreach ($item36->getValue() as $item58) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\OptionValue
                                // to \Magento\CatalogStorefrontApi\Api\Data\OptionValue
                                /** @var \Magento\CatalogStorefrontApi\Proto\OptionValue $item58 **/
                                $p = function () use ($item58) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\OptionValue();
                                    $r->setOptionId($item58->getOptionId());
                                    $r->setProductId($item58->getProductId());
                                    $r->setType($item58->getType());
                                    $r->setIsRequire($item58->getIsRequire());
                                    $r->setSku($item58->getSku());
                                    $r->setMaxCharacters($item58->getMaxCharacters());
                                    $r->setFileExtension($item58->getFileExtension());
                                    $r->setImageSizeX($item58->getImageSizeX());
                                    $r->setImageSizeY($item58->getImageSizeY());
                                    $r->setSortOrder($item58->getSortOrder());
                                    $r->setDefaultTitle($item58->getDefaultTitle());
                                    $r->setStoreTitle($item58->getStoreTitle());
                                    $r->setTitle($item58->getTitle());
                                    $r->setDefaultPrice($item58->getDefaultPrice());
                                    $r->setDefaultPriceType($item58->getDefaultPriceType());
                                    $r->setStorePrice($item58->getStorePrice());
                                    $r->setStorePriceType($item58->getStorePriceType());
                                    $r->setPrice($item58->getPrice());
                                    $r->setPriceType($item58->getPriceType());
                                    $r->setOptionTypeId($item58->getOptionTypeId());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setValue($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setOptions($res);
                    $res = [];
                    foreach ($item1->getUrlRewrites() as $item37) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\UrlRewrite
                        // to \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite
                        /** @var \Magento\CatalogStorefrontApi\Proto\UrlRewrite $item37 **/
                        $p = function () use ($item37) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite();
                            $r->setUrl($item37->getUrl());
                            $res = [];
                            foreach ($item37->getParameters() as $item39) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter
                                // to \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter
                                /** @var \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter $item39 **/
                                $p = function () use ($item39) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter();
                                    $r->setName($item39->getName());
                                    $r->setValue($item39->getValue());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setParameters($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setUrlRewrites($res);
                    $r->setCountryOfManufacture($item1->getCountryOfManufacture());
                    $r->setSpecialPrice($item1->getSpecialPrice());
                    $r->setSpecialFromDate($item1->getSpecialFromDate());
                    $r->setSpecialToDate($item1->getSpecialToDate());
                    $res = [];
                    foreach ($item1->getLinks() as $item42) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Link
                        // to \Magento\CatalogStorefrontApi\Api\Data\Link
                        /** @var \Magento\CatalogStorefrontApi\Proto\Link $item42 **/
                        $p = function () use ($item42) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Link();
                            $r->setProductId($item42->getProductId());
                            $r->setPosition($item42->getPosition());
                            $r->setType($item42->getType());
                            $r->setQty($item42->getQty());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setLinks($res);
                    $r->setCanonicalUrl($item1->getCanonicalUrl());
                    $r->setPriceView($item1->getPriceView());
                    $r->setLinksPurchasedSeparately($item1->getLinksPurchasedSeparately());
                    $r->setOnlyXLeftInStock($item1->getOnlyXLeftInStock());
                    $res = [];
                    foreach ($item1->getProductOptions() as $item47) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductOption
                        // to \Magento\CatalogStorefrontApi\Api\Data\ProductOption
                        /** @var \Magento\CatalogStorefrontApi\Proto\ProductOption $item47 **/
                        $p = function () use ($item47) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductOption();
                            $r->setId($item47->getId());
                            $r->setLabel($item47->getLabel());
                            $r->setSortOrder($item47->getSortOrder());
                            $r->setRequired($item47->getRequired());
                            $r->setRenderType($item47->getRenderType());
                            $r->setType($item47->getType());
                            $res = [];
                            foreach ($item47->getValues() as $item54) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\ProductOptionValue
                                // to \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue
                                /** @var \Magento\CatalogStorefrontApi\Proto\ProductOptionValue $item54 **/
                                $p = function () use ($item54) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue();
                                    $r->setId($item54->getId());
                                    $r->setLabel($item54->getLabel());
                                    $r->setSortOrder($item54->getSortOrder());
                                    $r->setDefault($item54->getDefault());
                                    $r->setImageUrl($item54->getImageUrl());
                                    $r->setQtyMutability($item54->getQtyMutability());
                                    $r->setQty($item54->getQty());
                                    $r->setInfoUrl($item54->getInfoUrl());
                                    $r->setPrice($item54->getPrice());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setValues($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setProductOptions($res);
                    $res = [];
                    foreach ($item1->getShopperInputOptions() as $item48) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption
                        // to \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption
                        /** @var \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption $item48 **/
                        $p = function () use ($item48) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption();
                            $r->setId($item48->getId());
                            $r->setLabel($item48->getLabel());
                            $r->setSortOrder($item48->getSortOrder());
                            $r->setRequired($item48->getRequired());
                            $r->setRenderType($item48->getRenderType());
                            $res = [];
                            foreach ($item48->getPrice() as $item54) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\Price
                                // to \Magento\CatalogStorefrontApi\Api\Data\Price
                                /** @var \Magento\CatalogStorefrontApi\Proto\Price $item54 **/
                                $p = function () use ($item54) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Price();
                                    $r->setRegularPrice($item54->getRegularPrice());
                                    $r->setFinalPrice($item54->getFinalPrice());
                                    $r->setScope($item54->getScope());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setPrice($res);
                            $values = [];
                            foreach ($item48->getFileExtension() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setFileExtension($values);
                            $prop56 = $item48->getRange();
                            if ($prop56 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\ValueRange
                                // to \Magento\CatalogStorefrontApi\Api\Data\ValueRange
                                /** @var \Magento\CatalogStorefrontApi\Proto\ValueRange $prop56 **/
                                $p = function () use ($prop56) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\ValueRange();
                                    $r->setFrom($prop56->getFrom());
                                    $r->setTo($prop56->getTo());
                                    return $r;
                                };
                                $out = $p();
                                $r->setRange($out);
                            }
                            $r->setImageSizeX($item48->getImageSizeX());
                            $r->setImageSizeY($item48->getImageSizeY());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setShopperInputOptions($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setItems($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param ImportProductsRequestInterface $request
     * @return ImportProductsResponseInterface
     * @throws \Throwable
     */
    public function importProducts(ImportProductsRequestInterface $request): ImportProductsResponseInterface
    {
        $protoRequest = $this->importProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->importProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->importProductsFromProto($protoResult);
    }

    /**
     * Autogenerated description for importProducts method
     *
     * @param ImportProductsRequestInterface $value
     * @return ImportProductsRequest
     */
    private function importProductsToProto(ImportProductsRequestInterface $value): ImportProductsRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest
        // to \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest();
            $res = [];
            foreach ($value->getProducts() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportProductDataRequest
                // to \Magento\CatalogStorefrontApi\Proto\ImportProductDataRequest
                /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportProductDataRequest $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\ImportProductDataRequest();
                    $prop2 = $item1->getProduct();
                    if ($prop2 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Product
                        // to \Magento\CatalogStorefrontApi\Proto\Product
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Product $prop2 **/
                        $p = function () use ($prop2) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Product();
                            $r->setId($prop2->getId());
                            $r->setAttributeSetId($prop2->getAttributeSetId());
                            $r->setHasOptions($prop2->getHasOptions());
                            $r->setCreatedAt($prop2->getCreatedAt());
                            $r->setUpdatedAt($prop2->getUpdatedAt());
                            $r->setSku($prop2->getSku());
                            $r->setTypeId($prop2->getTypeId());
                            $r->setStatus($prop2->getStatus());
                            $r->setStockStatus($prop2->getStockStatus());
                            $r->setName($prop2->getName());
                            $r->setDescription($prop2->getDescription());
                            $r->setShortDescription($prop2->getShortDescription());
                            $r->setUrlKey($prop2->getUrlKey());
                            $r->setGiftcardType($prop2->getGiftcardType());
                            $r->setQty($prop2->getQty());
                            $r->setTaxClassId($prop2->getTaxClassId());
                            $r->setWeight($prop2->getWeight());
                            $res = [];
                            foreach ($prop2->getImages() as $item20) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                                // to \Magento\CatalogStorefrontApi\Proto\Image
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $item20 **/
                                $p = function () use ($item20) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                                    $prop21 = $item20->getResource();
                                    if ($prop21 !== null) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                        // to \Magento\CatalogStorefrontApi\Proto\MediaResource
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\MediaResource $prop21 **/
                                        $p = function () use ($prop21) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\MediaResource();
                                            $r->setUrl($prop21->getUrl());
                                            $r->setLabel($prop21->getLabel());
                                            $values = [];
                                            foreach ($prop21->getRoles() as $newValue) {
                                                $values[] = $newValue;
                                            }
                                            $r->setRoles($values);
                                            return $r;
                                        };
                                        $proto = $p();
                                        $r->setResource($proto);
                                    }
                                    $r->setSortOrder($item20->getSortOrder());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setImages($res);
                            $res = [];
                            foreach ($prop2->getVideos() as $item21) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Video
                                // to \Magento\CatalogStorefrontApi\Proto\Video
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Video $item21 **/
                                $p = function () use ($item21) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Video();
                                    $prop22 = $item21->getPreview();
                                    if ($prop22 !== null) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                        // to \Magento\CatalogStorefrontApi\Proto\MediaResource
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\MediaResource $prop22 **/
                                        $p = function () use ($prop22) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\MediaResource();
                                            $r->setUrl($prop22->getUrl());
                                            $r->setLabel($prop22->getLabel());
                                            $values = [];
                                            foreach ($prop22->getRoles() as $newValue) {
                                                $values[] = $newValue;
                                            }
                                            $r->setRoles($values);
                                            return $r;
                                        };
                                        $proto = $p();
                                        $r->setPreview($proto);
                                    }
                                    $prop23 = $item21->getVideo();
                                    if ($prop23 !== null) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\VideoItem
                                        // to \Magento\CatalogStorefrontApi\Proto\VideoItem
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\VideoItem $prop23 **/
                                        $p = function () use ($prop23) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\VideoItem();
                                            $r->setVideoProvider($prop23->getVideoProvider());
                                            $r->setVideoUrl($prop23->getVideoUrl());
                                            $r->setVideoTitle($prop23->getVideoTitle());
                                            $r->setVideoDescription($prop23->getVideoDescription());
                                            $r->setVideoMetadata($prop23->getVideoMetadata());
                                            $r->setMediaType($prop23->getMediaType());
                                            return $r;
                                        };
                                        $proto = $p();
                                        $r->setVideo($proto);
                                    }
                                    $r->setSortOrder($item21->getSortOrder());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setVideos($res);
                            $res = [];
                            foreach ($prop2->getSamples() as $item22) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Sample
                                // to \Magento\CatalogStorefrontApi\Proto\Sample
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Sample $item22 **/
                                $p = function () use ($item22) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Sample();
                                    $prop23 = $item22->getResource();
                                    if ($prop23 !== null) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                        // to \Magento\CatalogStorefrontApi\Proto\MediaResource
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\MediaResource $prop23 **/
                                        $p = function () use ($prop23) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\MediaResource();
                                            $r->setUrl($prop23->getUrl());
                                            $r->setLabel($prop23->getLabel());
                                            $values = [];
                                            foreach ($prop23->getRoles() as $newValue) {
                                                $values[] = $newValue;
                                            }
                                            $r->setRoles($values);
                                            return $r;
                                        };
                                        $proto = $p();
                                        $r->setResource($proto);
                                    }
                                    $r->setSortOrder($item22->getSortOrder());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setSamples($res);
                            $r->setVisibility($prop2->getVisibility());
                            $res = [];
                            foreach ($prop2->getAttributes() as $item24) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Attribute
                                // to \Magento\CatalogStorefrontApi\Proto\Attribute
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Attribute $item24 **/
                                $p = function () use ($item24) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Attribute();
                                    $r->setCode($item24->getCode());
                                    $r->setType($item24->getType());
                                    $values = [];
                                    foreach ($item24->getValues() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setValues($values);
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setAttributes($res);
                            $r->setMetaDescription($prop2->getMetaDescription());
                            $r->setMetaKeyword($prop2->getMetaKeyword());
                            $r->setMetaTitle($prop2->getMetaTitle());
                            $values = [];
                            foreach ($prop2->getCategories() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setCategories($values);
                            $r->setRequiredOptions($prop2->getRequiredOptions());
                            $r->setCreatedIn($prop2->getCreatedIn());
                            $r->setUpdatedIn($prop2->getUpdatedIn());
                            $r->setQuantityAndStockStatus($prop2->getQuantityAndStockStatus());
                            $r->setOptionsContainer($prop2->getOptionsContainer());
                            $r->setMsrpDisplayActualPriceType($prop2->getMsrpDisplayActualPriceType());
                            $r->setIsReturnable($prop2->getIsReturnable());
                            $r->setUrlSuffix($prop2->getUrlSuffix());
                            $res = [];
                            foreach ($prop2->getOptions() as $item37) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Option
                                // to \Magento\CatalogStorefrontApi\Proto\Option
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Option $item37 **/
                                $p = function () use ($item37) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Option();
                                    $r->setOptionId($item37->getOptionId());
                                    $r->setProductId($item37->getProductId());
                                    $r->setType($item37->getType());
                                    $r->setIsRequire($item37->getIsRequire());
                                    $r->setSku($item37->getSku());
                                    $r->setMaxCharacters($item37->getMaxCharacters());
                                    $r->setFileExtension($item37->getFileExtension());
                                    $r->setImageSizeX($item37->getImageSizeX());
                                    $r->setImageSizeY($item37->getImageSizeY());
                                    $r->setSortOrder($item37->getSortOrder());
                                    $r->setDefaultTitle($item37->getDefaultTitle());
                                    $r->setStoreTitle($item37->getStoreTitle());
                                    $r->setTitle($item37->getTitle());
                                    $r->setDefaultPrice($item37->getDefaultPrice());
                                    $r->setDefaultPriceType($item37->getDefaultPriceType());
                                    $r->setStorePrice($item37->getStorePrice());
                                    $r->setStorePriceType($item37->getStorePriceType());
                                    $r->setPrice($item37->getPrice());
                                    $r->setPriceType($item37->getPriceType());
                                    $r->setRequired($item37->getRequired());
                                    $r->setProductSku($item37->getProductSku());
                                    $res = [];
                                    foreach ($item37->getValue() as $item59) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\OptionValue
                                        // to \Magento\CatalogStorefrontApi\Proto\OptionValue
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\OptionValue $item59 **/
                                        $p = function () use ($item59) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\OptionValue();
                                            $r->setOptionId($item59->getOptionId());
                                            $r->setProductId($item59->getProductId());
                                            $r->setType($item59->getType());
                                            $r->setIsRequire($item59->getIsRequire());
                                            $r->setSku($item59->getSku());
                                            $r->setMaxCharacters($item59->getMaxCharacters());
                                            $r->setFileExtension($item59->getFileExtension());
                                            $r->setImageSizeX($item59->getImageSizeX());
                                            $r->setImageSizeY($item59->getImageSizeY());
                                            $r->setSortOrder($item59->getSortOrder());
                                            $r->setDefaultTitle($item59->getDefaultTitle());
                                            $r->setStoreTitle($item59->getStoreTitle());
                                            $r->setTitle($item59->getTitle());
                                            $r->setDefaultPrice($item59->getDefaultPrice());
                                            $r->setDefaultPriceType($item59->getDefaultPriceType());
                                            $r->setStorePrice($item59->getStorePrice());
                                            $r->setStorePriceType($item59->getStorePriceType());
                                            $r->setPrice($item59->getPrice());
                                            $r->setPriceType($item59->getPriceType());
                                            $r->setOptionTypeId($item59->getOptionTypeId());
                                            return $r;
                                        };
                                        $proto = $p();
                                        $res[] = $proto;
                                    }
                                    $r->setValue($res);
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setOptions($res);
                            $res = [];
                            foreach ($prop2->getUrlRewrites() as $item38) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite
                                // to \Magento\CatalogStorefrontApi\Proto\UrlRewrite
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite $item38 **/
                                $p = function () use ($item38) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\UrlRewrite();
                                    $r->setUrl($item38->getUrl());
                                    $res = [];
                                    foreach ($item38->getParameters() as $item40) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter
                                        // to \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter $item40 **/
                                        $p = function () use ($item40) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter();
                                            $r->setName($item40->getName());
                                            $r->setValue($item40->getValue());
                                            return $r;
                                        };
                                        $proto = $p();
                                        $res[] = $proto;
                                    }
                                    $r->setParameters($res);
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setUrlRewrites($res);
                            $r->setCountryOfManufacture($prop2->getCountryOfManufacture());
                            $r->setSpecialPrice($prop2->getSpecialPrice());
                            $r->setSpecialFromDate($prop2->getSpecialFromDate());
                            $r->setSpecialToDate($prop2->getSpecialToDate());
                            $res = [];
                            foreach ($prop2->getLinks() as $item43) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Link
                                // to \Magento\CatalogStorefrontApi\Proto\Link
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Link $item43 **/
                                $p = function () use ($item43) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Link();
                                    $r->setProductId($item43->getProductId());
                                    $r->setPosition($item43->getPosition());
                                    $r->setType($item43->getType());
                                    $r->setQty($item43->getQty());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setLinks($res);
                            $r->setCanonicalUrl($prop2->getCanonicalUrl());
                            $r->setPriceView($prop2->getPriceView());
                            $r->setLinksPurchasedSeparately($prop2->getLinksPurchasedSeparately());
                            $r->setOnlyXLeftInStock($prop2->getOnlyXLeftInStock());
                            $res = [];
                            foreach ($prop2->getProductOptions() as $item48) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductOption
                                // to \Magento\CatalogStorefrontApi\Proto\ProductOption
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductOption $item48 **/
                                $p = function () use ($item48) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\ProductOption();
                                    $r->setId($item48->getId());
                                    $r->setLabel($item48->getLabel());
                                    $r->setSortOrder($item48->getSortOrder());
                                    $r->setRequired($item48->getRequired());
                                    $r->setRenderType($item48->getRenderType());
                                    $r->setType($item48->getType());
                                    $res = [];
                                    foreach ($item48->getValues() as $item55) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue
                                        // to \Magento\CatalogStorefrontApi\Proto\ProductOptionValue
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue $item55 **/
                                        $p = function () use ($item55) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\ProductOptionValue();
                                            $r->setId($item55->getId());
                                            $r->setLabel($item55->getLabel());
                                            $r->setSortOrder($item55->getSortOrder());
                                            $r->setDefault($item55->getDefault());
                                            $r->setImageUrl($item55->getImageUrl());
                                            $r->setQtyMutability($item55->getQtyMutability());
                                            $r->setQty($item55->getQty());
                                            $r->setInfoUrl($item55->getInfoUrl());
                                            $r->setPrice($item55->getPrice());
                                            return $r;
                                        };
                                        $proto = $p();
                                        $res[] = $proto;
                                    }
                                    $r->setValues($res);
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setProductOptions($res);
                            $res = [];
                            foreach ($prop2->getShopperInputOptions() as $item49) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption
                                // to \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption $item49 **/
                                $p = function () use ($item49) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption();
                                    $r->setId($item49->getId());
                                    $r->setLabel($item49->getLabel());
                                    $r->setSortOrder($item49->getSortOrder());
                                    $r->setRequired($item49->getRequired());
                                    $r->setRenderType($item49->getRenderType());
                                    $res = [];
                                    foreach ($item49->getPrice() as $item55) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Price
                                        // to \Magento\CatalogStorefrontApi\Proto\Price
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Price $item55 **/
                                        $p = function () use ($item55) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\Price();
                                            $r->setRegularPrice($item55->getRegularPrice());
                                            $r->setFinalPrice($item55->getFinalPrice());
                                            $r->setScope($item55->getScope());
                                            return $r;
                                        };
                                        $proto = $p();
                                        $res[] = $proto;
                                    }
                                    $r->setPrice($res);
                                    $values = [];
                                    foreach ($item49->getFileExtension() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setFileExtension($values);
                                    $prop57 = $item49->getRange();
                                    if ($prop57 !== null) {
                                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ValueRange
                                        // to \Magento\CatalogStorefrontApi\Proto\ValueRange
                                        /** @var \Magento\CatalogStorefrontApi\Api\Data\ValueRange $prop57 **/
                                        $p = function () use ($prop57) {
                                            $r = new \Magento\CatalogStorefrontApi\Proto\ValueRange();
                                            $r->setFrom($prop57->getFrom());
                                            $r->setTo($prop57->getTo());
                                            return $r;
                                        };
                                        $proto = $p();
                                        $r->setRange($proto);
                                    }
                                    $r->setImageSizeX($item49->getImageSizeX());
                                    $r->setImageSizeY($item49->getImageSizeY());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setShopperInputOptions($res);
                            return $r;
                        };
                        $proto = $p();
                        $r->setProduct($proto);
                    }
                    $values = [];
                    foreach ($item1->getAttributes() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setAttributes($values);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setProducts($res);
            $r->setStore($value->getStore());
            $prop3 = $value->getParams();
            if ($prop3 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\KeyValue
                // to \Magento\CatalogStorefrontApi\Proto\KeyValue
                /** @var \Magento\CatalogStorefrontApi\Api\Data\KeyValue $prop3 **/
                $p = function () use ($prop3) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\KeyValue();
                    $r->setKey($prop3->getKey());
                    $r->setValue($prop3->getValue());
                    return $r;
                };
                $proto = $p();
                $r->setParams($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for importProducts method
     *
     * @param ImportProductsResponse $value
     * @return ImportProductsResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function importProductsFromProto(ImportProductsResponse $value): ImportProductsResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param DeleteProductsRequestInterface $request
     * @return DeleteProductsResponseInterface
     * @throws \Throwable
     */
    public function deleteProducts(DeleteProductsRequestInterface $request): DeleteProductsResponseInterface
    {
        $protoRequest = $this->deleteProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->deleteProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->deleteProductsFromProto($protoResult);
    }

    /**
     * Autogenerated description for deleteProducts method
     *
     * @param DeleteProductsRequestInterface $value
     * @return DeleteProductsRequest
     */
    private function deleteProductsToProto(DeleteProductsRequestInterface $value): DeleteProductsRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsRequest
        // to \Magento\CatalogStorefrontApi\Proto\DeleteProductsRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\DeleteProductsRequest();
            $values = [];
            foreach ($value->getProductIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setProductIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for deleteProducts method
     *
     * @param DeleteProductsResponse $value
     * @return DeleteProductsResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function deleteProductsFromProto(DeleteProductsResponse $value): DeleteProductsResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\DeleteProductsResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\DeleteProductsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param DeleteCategoriesRequestInterface $request
     * @return DeleteCategoriesResponseInterface
     * @throws \Throwable
     */
    public function deleteCategories(DeleteCategoriesRequestInterface $request): DeleteCategoriesResponseInterface
    {
        $protoRequest = $this->deleteCategoriesToProto($request);
        [$protoResult, $status] = $this->protoClient->deleteCategories($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->deleteCategoriesFromProto($protoResult);
    }

    /**
     * Autogenerated description for deleteCategories method
     *
     * @param DeleteCategoriesRequestInterface $value
     * @return DeleteCategoriesRequest
     */
    private function deleteCategoriesToProto(DeleteCategoriesRequestInterface $value): DeleteCategoriesRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesRequest
        // to \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesRequest();
            $values = [];
            foreach ($value->getCategoryIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setCategoryIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for deleteCategories method
     *
     * @param DeleteCategoriesResponse $value
     * @return DeleteCategoriesResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function deleteCategoriesFromProto(DeleteCategoriesResponse $value): DeleteCategoriesResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param ImportCategoriesRequestInterface $request
     * @return ImportCategoriesResponseInterface
     * @throws \Throwable
     */
    public function importCategories(ImportCategoriesRequestInterface $request): ImportCategoriesResponseInterface
    {
        $protoRequest = $this->importCategoriesToProto($request);
        [$protoResult, $status] = $this->protoClient->importCategories($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->importCategoriesFromProto($protoResult);
    }

    /**
     * Autogenerated description for importCategories method
     *
     * @param ImportCategoriesRequestInterface $value
     * @return ImportCategoriesRequest
     */
    private function importCategoriesToProto(ImportCategoriesRequestInterface $value): ImportCategoriesRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesRequest
        // to \Magento\CatalogStorefrontApi\Proto\ImportCategoriesRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportCategoriesRequest();
            $res = [];
            foreach ($value->getCategories() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportCategoryDataRequest
                // to \Magento\CatalogStorefrontApi\Proto\ImportCategoryDataRequest
                /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportCategoryDataRequest $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\ImportCategoryDataRequest();
                    $prop2 = $item1->getCategory();
                    if ($prop2 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Category
                        // to \Magento\CatalogStorefrontApi\Proto\Category
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Category $prop2 **/
                        $p = function () use ($prop2) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Category();
                            $r->setId($prop2->getId());
                            $r->setPath($prop2->getPath());
                            $r->setPosition($prop2->getPosition());
                            $r->setLevel($prop2->getLevel());
                            $r->setChildrenCount($prop2->getChildrenCount());
                            $r->setName($prop2->getName());
                            $r->setDisplayMode($prop2->getDisplayMode());
                            $r->setDefaultSortBy($prop2->getDefaultSortBy());
                            $r->setUrlKey($prop2->getUrlKey());
                            $r->setUrlPath($prop2->getUrlPath());
                            $r->setIsActive($prop2->getIsActive());
                            $r->setIsAnchor($prop2->getIsAnchor());
                            $r->setIncludeInMenu($prop2->getIncludeInMenu());
                            $values = [];
                            foreach ($prop2->getAvailableSortBy() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setAvailableSortBy($values);
                            $res = [];
                            foreach ($prop2->getBreadcrumbs() as $item17) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb
                                // to \Magento\CatalogStorefrontApi\Proto\Breadcrumb
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb $item17 **/
                                $p = function () use ($item17) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Breadcrumb();
                                    $r->setCategoryId($item17->getCategoryId());
                                    $r->setCategoryName($item17->getCategoryName());
                                    $r->setCategoryLevel($item17->getCategoryLevel());
                                    $r->setCategoryUrlKey($item17->getCategoryUrlKey());
                                    $r->setCategoryUrlPath($item17->getCategoryUrlPath());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setBreadcrumbs($res);
                            $r->setDescription($prop2->getDescription());
                            $r->setCanonicalUrl($prop2->getCanonicalUrl());
                            $r->setProductCount($prop2->getProductCount());
                            $values = [];
                            foreach ($prop2->getChildren() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setChildren($values);
                            $r->setImage($prop2->getImage());
                            $r->setParentId($prop2->getParentId());
                            $r->setMetaTitle($prop2->getMetaTitle());
                            $r->setMetaDescription($prop2->getMetaDescription());
                            $r->setMetaKeywords($prop2->getMetaKeywords());
                            $res = [];
                            foreach ($prop2->getAttributes() as $item27) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Attribute
                                // to \Magento\CatalogStorefrontApi\Proto\Attribute
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Attribute $item27 **/
                                $p = function () use ($item27) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Attribute();
                                    $r->setCode($item27->getCode());
                                    $r->setType($item27->getType());
                                    $values = [];
                                    foreach ($item27->getValues() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setValues($values);
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setAttributes($res);
                            return $r;
                        };
                        $proto = $p();
                        $r->setCategory($proto);
                    }
                    $values = [];
                    foreach ($item1->getAttributes() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setAttributes($values);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setCategories($res);
            $r->setStore($value->getStore());
            $prop3 = $value->getParams();
            if ($prop3 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\KeyValue
                // to \Magento\CatalogStorefrontApi\Proto\KeyValue
                /** @var \Magento\CatalogStorefrontApi\Api\Data\KeyValue $prop3 **/
                $p = function () use ($prop3) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\KeyValue();
                    $r->setKey($prop3->getKey());
                    $r->setValue($prop3->getValue());
                    return $r;
                };
                $proto = $p();
                $r->setParams($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for importCategories method
     *
     * @param ImportCategoriesResponse $value
     * @return ImportCategoriesResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function importCategoriesFromProto(ImportCategoriesResponse $value): ImportCategoriesResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportCategoriesResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportCategoriesResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param CategoriesGetRequestInterface $request
     * @return CategoriesGetResponseInterface
     * @throws \Throwable
     */
    public function getCategories(CategoriesGetRequestInterface $request): CategoriesGetResponseInterface
    {
        $protoRequest = $this->getCategoriesToProto($request);
        [$protoResult, $status] = $this->protoClient->getCategories($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getCategoriesFromProto($protoResult);
    }

    /**
     * Autogenerated description for getCategories method
     *
     * @param CategoriesGetRequestInterface $value
     * @return CategoriesGetRequest
     */
    private function getCategoriesToProto(CategoriesGetRequestInterface $value): CategoriesGetRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequest
        // to \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest();
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            $r->setLevel($value->getLevel());
            $r->setStore($value->getStore());
            $values = [];
            foreach ($value->getAttributeCodes() as $newValue) {
                $values[] = $newValue;
            }
            $r->setAttributeCodes($values);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getCategories method
     *
     * @param CategoriesGetResponse $value
     * @return CategoriesGetResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getCategoriesFromProto(CategoriesGetResponse $value): CategoriesGetResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Category
                // to \Magento\CatalogStorefrontApi\Api\Data\Category
                /** @var \Magento\CatalogStorefrontApi\Proto\Category $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Category();
                    $r->setId($item1->getId());
                    $r->setPath($item1->getPath());
                    $r->setPosition($item1->getPosition());
                    $r->setLevel($item1->getLevel());
                    $r->setChildrenCount($item1->getChildrenCount());
                    $r->setName($item1->getName());
                    $r->setDisplayMode($item1->getDisplayMode());
                    $r->setDefaultSortBy($item1->getDefaultSortBy());
                    $r->setUrlKey($item1->getUrlKey());
                    $r->setUrlPath($item1->getUrlPath());
                    $r->setIsActive($item1->getIsActive());
                    $r->setIsAnchor($item1->getIsAnchor());
                    $r->setIncludeInMenu($item1->getIncludeInMenu());
                    $values = [];
                    foreach ($item1->getAvailableSortBy() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setAvailableSortBy($values);
                    $res = [];
                    foreach ($item1->getBreadcrumbs() as $item16) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Breadcrumb
                        // to \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb
                        /** @var \Magento\CatalogStorefrontApi\Proto\Breadcrumb $item16 **/
                        $p = function () use ($item16) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb();
                            $r->setCategoryId($item16->getCategoryId());
                            $r->setCategoryName($item16->getCategoryName());
                            $r->setCategoryLevel($item16->getCategoryLevel());
                            $r->setCategoryUrlKey($item16->getCategoryUrlKey());
                            $r->setCategoryUrlPath($item16->getCategoryUrlPath());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setBreadcrumbs($res);
                    $r->setDescription($item1->getDescription());
                    $r->setCanonicalUrl($item1->getCanonicalUrl());
                    $r->setProductCount($item1->getProductCount());
                    $values = [];
                    foreach ($item1->getChildren() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setChildren($values);
                    $r->setImage($item1->getImage());
                    $r->setParentId($item1->getParentId());
                    $r->setMetaTitle($item1->getMetaTitle());
                    $r->setMetaDescription($item1->getMetaDescription());
                    $r->setMetaKeywords($item1->getMetaKeywords());
                    $res = [];
                    foreach ($item1->getAttributes() as $item26) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Attribute
                        // to \Magento\CatalogStorefrontApi\Api\Data\Attribute
                        /** @var \Magento\CatalogStorefrontApi\Proto\Attribute $item26 **/
                        $p = function () use ($item26) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Attribute();
                            $r->setCode($item26->getCode());
                            $r->setType($item26->getType());
                            $values = [];
                            foreach ($item26->getValues() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setValues($values);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setAttributes($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setItems($res);
            return $r;
        };
        $out = $p();

        return $out;
    }
}
