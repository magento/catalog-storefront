<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api;

use \Magento\CatalogStorefrontApi\Api\Data\ImportVariantsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportVariantsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteVariantsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteVariantsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductVariantRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductVariantResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\OptionSelectionRequestInterface;
use \Magento\CatalogStorefrontApi\Proto\ImportVariantsRequest;
use \Magento\CatalogStorefrontApi\Proto\ImportVariantsResponse;
use \Magento\CatalogStorefrontApi\Proto\DeleteVariantsRequest;
use \Magento\CatalogStorefrontApi\Proto\DeleteVariantsResponse;
use \Magento\CatalogStorefrontApi\Proto\ProductVariantRequest;
use \Magento\CatalogStorefrontApi\Proto\ProductVariantResponse;
use \Magento\CatalogStorefrontApi\Proto\OptionSelectionRequest;
use \Magento\CatalogStorefrontApi\Proto\VariantServiceClient;

/**
 * Autogenerated description for VariantServiceProxyServer class
 *
 * @SuppressWarnings(PHPMD)
 */
class VariantServiceProxyServer implements \Magento\CatalogStorefrontApi\Proto\VariantServiceInterface
{
    /**
     * @var VariantServiceServerInterface
     */
    private $service;

    /**
     * @param VariantServiceServerInterface $service
     */
    public function __construct(
        VariantServiceServerInterface $service
    ) {
        $this->service = $service;
    }

    /**
     * Autogenerated description for ImportProductVariants method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ImportVariantsRequest $in
     * @return ImportVariantsResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function ImportProductVariants(\Spiral\GRPC\ContextInterface $ctx, ImportVariantsRequest $in): ImportVariantsResponse
    {
        try {
            $magentoDtoRequest = $this->ImportProductVariantsFromProto($in);
            $magentoDtoResponse = $this->service->ImportProductVariants($magentoDtoRequest);
            return $this->ImportProductVariantsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for ImportProductVariants method
     *
     * @param ImportVariantsRequest $value
     * @return ImportVariantsRequestInterface
     */
    private function ImportProductVariantsFromProto(ImportVariantsRequest $value): ImportVariantsRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportVariantsRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportVariantsRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportVariantsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportVariantsRequest();
            $res = [];
            foreach ($value->getVariants() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\ProductVariantImport
                // to \Magento\CatalogStorefrontApi\Api\Data\ProductVariantImport
                /** @var \Magento\CatalogStorefrontApi\Proto\ProductVariantImport $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductVariantImport();
                    $r->setId($item1->getId());
                    $values = [];
                    foreach ($item1->getOptionValues() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setOptionValues($values);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setVariants($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for ImportProductVariants method
     *
     * @param ImportVariantsResponseInterface $value
     * @return ImportVariantsResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function ImportProductVariantsToProto(ImportVariantsResponseInterface $value): ImportVariantsResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportVariantsResponse
        // to \Magento\CatalogStorefrontApi\Proto\ImportVariantsResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportVariantsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportVariantsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for DeleteProductVariants method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param DeleteVariantsRequest $in
     * @return DeleteVariantsResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function DeleteProductVariants(\Spiral\GRPC\ContextInterface $ctx, DeleteVariantsRequest $in): DeleteVariantsResponse
    {
        try {
            $magentoDtoRequest = $this->DeleteProductVariantsFromProto($in);
            $magentoDtoResponse = $this->service->DeleteProductVariants($magentoDtoRequest);
            return $this->DeleteProductVariantsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for DeleteProductVariants method
     *
     * @param DeleteVariantsRequest $value
     * @return DeleteVariantsRequestInterface
     */
    private function DeleteProductVariantsFromProto(DeleteVariantsRequest $value): DeleteVariantsRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\DeleteVariantsRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\DeleteVariantsRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\DeleteVariantsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\DeleteVariantsRequest();
            $values = [];
            foreach ($value->getId() as $newValue) {
                $values[] = $newValue;
            }
            $r->setId($values);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for DeleteProductVariants method
     *
     * @param DeleteVariantsResponseInterface $value
     * @return DeleteVariantsResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function DeleteProductVariantsToProto(DeleteVariantsResponseInterface $value): DeleteVariantsResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DeleteVariantsResponse
        // to \Magento\CatalogStorefrontApi\Proto\DeleteVariantsResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\DeleteVariantsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\DeleteVariantsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for GetProductVariants method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ProductVariantRequest $in
     * @return ProductVariantResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function GetProductVariants(\Spiral\GRPC\ContextInterface $ctx, ProductVariantRequest $in): ProductVariantResponse
    {
        try {
            $magentoDtoRequest = $this->GetProductVariantsFromProto($in);
            $magentoDtoResponse = $this->service->GetProductVariants($magentoDtoRequest);
            return $this->GetProductVariantsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for GetProductVariants method
     *
     * @param ProductVariantRequest $value
     * @return ProductVariantRequestInterface
     */
    private function GetProductVariantsFromProto(ProductVariantRequest $value): ProductVariantRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductVariantRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductVariantRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductVariantRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductVariantRequest();
            $r->setProductId($value->getProductId());
            $r->setStore($value->getStore());
            $res = [];
            foreach ($value->getPagination() as $item3) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\PaginationRequest
                // to \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest
                /** @var \Magento\CatalogStorefrontApi\Proto\PaginationRequest $item3 **/
                $p = function () use ($item3) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest();
                    $r->setName($item3->getName());
                    $r->setValue($item3->getValue());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPagination($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for GetProductVariants method
     *
     * @param ProductVariantResponseInterface $value
     * @return ProductVariantResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function GetProductVariantsToProto(ProductVariantResponseInterface $value): ProductVariantResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductVariantResponse
        // to \Magento\CatalogStorefrontApi\Proto\ProductVariantResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductVariantResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductVariantResponse();
            $res = [];
            foreach ($value->getMatchedVariants() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductVariant
                // to \Magento\CatalogStorefrontApi\Proto\ProductVariant
                /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductVariant $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\ProductVariant();
                    $r->setId($item1->getId());
                    $values = [];
                    foreach ($item1->getOptionValues() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setOptionValues($values);
                    $r->setProductId($item1->getProductId());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setMatchedVariants($res);
            $prop2 = $value->getPagination();
            if ($prop2 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse
                // to \Magento\CatalogStorefrontApi\Proto\PaginationResponse
                /** @var \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\PaginationResponse();
                    $r->setPageSize($prop2->getPageSize());
                    $r->setCurrentPage($prop2->getCurrentPage());
                    $r->setTotalPages($prop2->getTotalPages());
                    return $r;
                };
                $proto = $p();
                $r->setPagination($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for GetVariantsMatch method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param OptionSelectionRequest $in
     * @return ProductVariantResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function GetVariantsMatch(\Spiral\GRPC\ContextInterface $ctx, OptionSelectionRequest $in): ProductVariantResponse
    {
        try {
            $magentoDtoRequest = $this->GetVariantsMatchFromProto($in);
            $magentoDtoResponse = $this->service->GetVariantsMatch($magentoDtoRequest);
            return $this->GetVariantsMatchToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for GetVariantsMatch method
     *
     * @param OptionSelectionRequest $value
     * @return OptionSelectionRequestInterface
     */
    private function GetVariantsMatchFromProto(OptionSelectionRequest $value): OptionSelectionRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\OptionSelectionRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\OptionSelectionRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\OptionSelectionRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\OptionSelectionRequest();
            $r->setStore($value->getStore());
            $values = [];
            foreach ($value->getValues() as $newValue) {
                $values[] = $newValue;
            }
            $r->setValues($values);
            $res = [];
            foreach ($value->getPagination() as $item3) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\PaginationRequest
                // to \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest
                /** @var \Magento\CatalogStorefrontApi\Proto\PaginationRequest $item3 **/
                $p = function () use ($item3) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\PaginationRequest();
                    $r->setName($item3->getName());
                    $r->setValue($item3->getValue());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPagination($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for GetVariantsMatch method
     *
     * @param ProductVariantResponseInterface $value
     * @return ProductVariantResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function GetVariantsMatchToProto(ProductVariantResponseInterface $value): ProductVariantResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductVariantResponse
        // to \Magento\CatalogStorefrontApi\Proto\ProductVariantResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductVariantResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductVariantResponse();
            $res = [];
            foreach ($value->getMatchedVariants() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductVariant
                // to \Magento\CatalogStorefrontApi\Proto\ProductVariant
                /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductVariant $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\ProductVariant();
                    $r->setId($item1->getId());
                    $values = [];
                    foreach ($item1->getOptionValues() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setOptionValues($values);
                    $r->setProductId($item1->getProductId());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setMatchedVariants($res);
            $prop2 = $value->getPagination();
            if ($prop2 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse
                // to \Magento\CatalogStorefrontApi\Proto\PaginationResponse
                /** @var \Magento\CatalogStorefrontApi\Api\Data\PaginationResponse $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\PaginationResponse();
                    $r->setPageSize($prop2->getPageSize());
                    $r->setCurrentPage($prop2->getCurrentPage());
                    $r->setTotalPages($prop2->getTotalPages());
                    return $r;
                };
                $proto = $p();
                $r->setPagination($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }
}
